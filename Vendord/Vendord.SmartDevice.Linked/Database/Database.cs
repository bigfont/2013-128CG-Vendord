[module:
    System.Diagnostics.CodeAnalysis.SuppressMessage(
        "StyleCop.CSharp.DocumentationRules", "*",
        Justification = "Reviewed. Suppression of all documentation rules is OK here.")]

namespace Vendord.SmartDevice.Linked
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlServerCe;
    using System.IO;
    using System.Linq;

    /// <summary>
    /// Represents an business object.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The order system works in a distributed environment, where users can INSERT orders on sereral machines (nodes). 
    /// Ergo, the PRIMARY KEY must be unique across all nodes and must not be reused. Options:
    /// 1. Auto-increment (Identity) Columns. High probability of PK collision if INSERT operations occur in multiple nodes. 
    /// 2. GUIDs. Essentially no probability of PK collisions but can lead to large and fragmented clustered indexes.
    /// 3. Keys that Include a Node Identifier. Add a node identifier to the autogenerated identity value.
    /// 4. Natural Keys. Use column values such as Social Insurance Numbers or Upc codes that must be unique already.
    /// 5. Online insertion.
    /// </para>
    /// <seealso>
    /// Selecting PKs for SYNC http://msdn.microsoft.com/en-us/library/bb726011.aspx
    /// GUID Generation http://social.msdn.microsoft.com/Forums/sqlserver/en-US/af52661f-7eb5-4c73-87e8-2d9ad195e112/algorithm-to-generate-guids-in-sql-server?forum=transactsql
    /// </seealso>
    /// </remarks>       
    public class Database
    {
        private const string SqlCeConnectionStringTemplate = @"Data Source={0};Persist Security Info=False;";

        private DbQueryExecutor queryExecutor;
        private DbSchemaBuilder schemaBuilder;

        private List<Product> _products;
        private List<Order> _orders;
        private List<OrderProduct> _orderProducts;
        private List<Vendor> _vendors;
        private List<Department> _departments;        
        private readonly string _connectionString;

        public Database() : this(Constants.VendordMainDatabaseFullPath)
        {            
        }

        public Database(string fullPath)
        {
            this._connectionString = GenerateSqlCeConnString(fullPath);
            this.queryExecutor = new DbQueryExecutor(this._connectionString);

            this.schemaBuilder = new DbSchemaBuilder(queryExecutor);
            this.schemaBuilder.CreateCeDb(fullPath, this._connectionString);
            this.schemaBuilder.CreateTables();                        
        }

        public string ConnectionString 
        {
            get
            {
                return _connectionString;
            }
        }

        public List<Order> Orders
        {
            get
            {
                if (this._orders == null)
                {
                    Order order = new Order(this.queryExecutor);
                    this._orders = order.SelectAll();
                }

                return this._orders;
            }
        }

        public List<Product> Products
        {
            get
            {
                
                if (this._products == null)
                {
                    Product p = new Product(this.queryExecutor);
                    this._products = p.SelectAll();
                }

                return this._products;
            }
        }

        public List<OrderProduct> OrderProducts
        {
            get
            {
                if (this._orderProducts == null)
                {
                    OrderProduct op = new OrderProduct(this.queryExecutor);
                    this._orderProducts = op.SelectAll();
                }

                return this._orderProducts;
            }
        }

        public List<Vendor> Vendors
        {
            get
            {
                if (this._vendors == null)
                {
                    Vendor vendor = new Vendor(this.queryExecutor);
                    this._vendors = vendor.SelectAll();
                }

                return this._vendors;
            }
        }

        public List<Department> Departments
        {
            get
            {
                if (this._departments == null)
                {
                    Department d = new Department(this.queryExecutor);
                    this._departments = d.SelectAll();
                }

                return this._departments;
            }
        }

        public static string GenerateSqlCeConnString(string databaseFullPath)
        {
            string sqlCeConnString;
            sqlCeConnString = string.Format(SqlCeConnectionStringTemplate, databaseFullPath);
            return sqlCeConnString;
        }

        public void EmptyTrash()
        {
            (new Order(this.queryExecutor)).EmptyTrash();
            (new Product(this.queryExecutor)).EmptyTrash();
            (new OrderProduct(this.queryExecutor)).EmptyTrash();
        } 
    }
}
