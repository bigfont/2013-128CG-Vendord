[module:
    System.Diagnostics.CodeAnalysis.SuppressMessage(
        "StyleCop.CSharp.DocumentationRules", "*",
        Justification = "Reviewed. Suppression of all documentation rules is OK here.")]

namespace Vendord.SmartDevice.Linked
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlServerCe;
    using System.IO;
    using System.Linq;

    /// <summary>
    /// Represents an business object.
    /// </summary>
    /// <remarks>
    /// <para>
    /// The order system works in a distributed environment, where users can INSERT orders on sereral machines (nodes). 
    /// Ergo, the PRIMARY KEY must be unique across all nodes and must not be reused. Options:
    /// 1. Auto-increment (Identity) Columns. High probability of PK collision if INSERT operations occur in multiple nodes. 
    /// 2. GUIDs. Essentially no probability of PK collisions but can lead to large and fragmented clustered indexes.
    /// 3. Keys that Include a Node Identifier. Add a node identifier to the autogenerated identity value.
    /// 4. Natural Keys. Use column values such as Social Insurance Numbers or Upc codes that must be unique already.
    /// 5. Online insertion.
    /// </para>
    /// <seealso>
    /// Selecting PKs for SYNC http://msdn.microsoft.com/en-us/library/bb726011.aspx
    /// GUID Generation http://social.msdn.microsoft.com/Forums/sqlserver/en-US/af52661f-7eb5-4c73-87e8-2d9ad195e112/algorithm-to-generate-guids-in-sql-server?forum=transactsql
    /// </seealso>
    /// </remarks>       
    public abstract class DbEntity
    {
        // non-database columns
        public string TableName
        {
            get
            {
                string tableName;
                tableName = "tbl" + this.GetType().Name;
                return tableName;
            }
        }

        public int IsInTrash { get; set; }

        public void EmptyTrash(Database db)
        {
            string emptyTrashQuery;
            emptyTrashQuery = string.Format(
                @"DELETE {0} WHERE (IsInTrash = 1)",
                this.TableName);

            db.ExecuteNonQuery(emptyTrashQuery, null);
        }

        public abstract void AddToTrash(Database db);
    }

    public class Order : DbEntity
    {
        public Guid Id { get; set; }

        public string Name { get; set; }

        public void UpsertIntoDb(Database db)
        {
            string insertQuery;

            insertQuery = string.Format(
                @"INSERT INTO tblOrder (Id, Name) VALUES (NEWID(), '{0}');",
                this.Name);

            db.ExecuteNonQuery(insertQuery, null);

            // set the Id to the newly generated Id
            this.Id = db.Orders.FirstOrDefault<Order>(os => os.Name.Equals(this.Name)).Id;
        }

        public override void AddToTrash(Database db)
        {
            string trashQuery;

            trashQuery = string.Format(
                @"UPDATE {0} SET IsInTrash = 1 WHERE Id = '{1}'",
                this.TableName,
                this.Id);

            db.ExecuteNonQuery(trashQuery, null);
        }

        public override string ToString()
        {
            return this.Name;
        }
    }

    public class Product : DbEntity
    {
        public string Upc { get; set; } // TODO Change Upc into an INTEGER

        public string Name { get; set; }

        public string VendorName { get; set; }

        public void UpsertIntoDb(Database db)
        {            
            var parameters = new SqlCeParameter[]
            {
                new SqlCeParameter() { ParameterName = "@Upc", SqlDbType = SqlDbType.NVarChar, Value = this.Upc },
                new SqlCeParameter() { ParameterName = "@Name", SqlDbType = SqlDbType.NVarChar, Value = this.Name },
                new SqlCeParameter() { ParameterName = "@VendorName", SqlDbType = SqlDbType.NVarChar, Value = this.VendorName }
            };

            string selectQuery = string.Format(
                @"SELECT COUNT(*) FROM {0} WHERE Upc = @upc",
                this.TableName);

            string insertQuery = string.Format(
                @"INSERT INTO {0} (Upc, Name, VendorName) VALUES (@upc, @name, @vendorName)",
                this.TableName);

            if (Convert.ToInt16(db.ExecuteScalar(selectQuery, parameters)) == 0)
            {
                db.ExecuteNonQuery(insertQuery, parameters);
            }
        }

        public override void AddToTrash(Database db)
        {
            string trashQuery;

            trashQuery = string.Format(
                @"UPDATE {0} SET IsInTrash = 1 WHERE Upc = '{1}'",
                this.TableName,
                this.Upc);

            db.ExecuteNonQuery(trashQuery, null);
        }

        public override string ToString()
        {
            return this.Name;
        }
    }

    public class OrderProduct : DbEntity
    {
        public Guid OrderID { get; set; }

        public string ProductUPC { get; set; }

        public int CasesToOrder { get; set; }

        public void UpsertIntoDb(Database db)
        {
            string selectQuery = string.Format(
                @"SELECT COUNT(*) FROM " + this.TableName + " WHERE OrderID = '{0}' AND ProductUPC = '{1}';",
                this.OrderID,
                this.ProductUPC);

            string insertQuery = string.Format(
                @"INSERT INTO " + this.TableName + " (OrderID, ProductUPC, CasesToOrder) VALUES ('{0}', '{1}', {2});",
                this.OrderID,
                this.ProductUPC,
                this.CasesToOrder);

            string updateQuery = string.Format(
                @"UPDATE " + this.TableName + " SET CasesToOrder = {2}, IsInTrash = 0 WHERE OrderID = '{0}' AND ProductUPC = '{1}';",
                this.OrderID,
                this.ProductUPC,
                this.CasesToOrder);

            if (Convert.ToInt16(db.ExecuteScalar(selectQuery, null)) == 0)
            {
                // TODO Add a code contract to ensure that both the order and the product exist in the database before insert
                db.ExecuteNonQuery(insertQuery, null);
            }
            else
            {
                db.ExecuteNonQuery(updateQuery, null);
            }
        }

        public override void AddToTrash(Database db)
        {
            string trashQuery;

            trashQuery = string.Format(
                @"UPDATE {0} SET IsInTrash = 1 WHERE OrderID = '{1}' AND ProductUPC = '{2}'",
                this.TableName,
                this.OrderID,
                this.ProductUPC);

            db.ExecuteNonQuery(trashQuery, null);
        }
    }

    public class Database
    {
        private const string SqlCeConnectionStringTemplate = @"Data Source={0};Persist Security Info=False;";

        private List<Product> _products;
        private List<Order> _order;
        private List<OrderProduct> _orderProducts;
        private readonly string _connectionString;

        public Database()
        {
            string fullPath = Constants.VendordMainDatabaseFullPath;
            this._connectionString = GenerateSqlCeConnString(fullPath);
            this.CreateCeDb(fullPath);
            this.CreateTables();
        }

        public Database(string fullPath)
        {
            this._connectionString = GenerateSqlCeConnString(fullPath);
            this.CreateCeDb(fullPath);
            this.CreateTables();
        }

        public List<Order> Orders
        {
            get
            {
                SqlCeDataReader reader;
                System.Data.SqlServerCe.SqlCeCommand command;

                if (this._order == null)
                {
                    this._order = new List<Order>();
                    using (SqlCeConnection conn = new SqlCeConnection(this._connectionString))
                    {
                        conn.Open();
                        command = new SqlCeCommand(@"SELECT * FROM tblOrder WHERE IsInTrash IS NULL OR IsInTrash = 0", conn);
                        reader = command.ExecuteReader();
                        while (reader.Read())
                        {
                            Order item = new Order()
                            {
                                Id = new Guid(reader["Id"].ToString()),
                                Name = Convert.ToString(reader["Name"])
                            };
                            this._order.Add(item);
                        }
                    }
                }

                return this._order;
            }
        }

        public List<Product> Products
        {
            get
            {
                SqlCeDataReader reader;
                SqlCeCommand command;

                if (this._products == null)
                {
                    this._products = new List<Product>();
                    using (SqlCeConnection conn = new SqlCeConnection(this._connectionString))
                    {
                        conn.Open();
                        command = new SqlCeCommand(@"SELECT * FROM tblProduct", conn);
                        reader = command.ExecuteReader();
                        while (reader.Read())
                        {
                            Product item = new Product()
                            {
                                Name = Convert.ToString(reader["Name"]),
                                Upc = Convert.ToString(reader["Upc"]),
                                VendorName = Convert.ToString(reader["VendorName"])
                            };
                            this._products.Add(item);
                        }
                    }
                }

                return this._products;
            }
        }

        public List<OrderProduct> OrderProducts
        {
            get
            {
                if (this._orderProducts == null)
                {
                    SqlCeDataReader reader;
                    SqlCeCommand command;

                    this._orderProducts = new List<OrderProduct>();
                    using (SqlCeConnection conn = new SqlCeConnection(this._connectionString))
                    {
                        conn.Open();
                        command = new SqlCeCommand(@"SELECT * FROM tblOrderProduct WHERE IsInTrash IS NULL OR IsInTrash = 0", conn);
                        reader = command.ExecuteReader();
                        while (reader.Read())
                        {
                            OrderProduct item = new OrderProduct()
                            {
                                ProductUPC = reader["ProductUPC"].ToString(),
                                OrderID = new Guid(reader["OrderID"].ToString()),
                                CasesToOrder = Convert.ToInt32(reader["CasesToOrder"])
                            };
                            this._orderProducts.Add(item);
                        }
                    }
                }

                return this._orderProducts;
            }
        }

        public static string GenerateSqlCeConnString(string databaseFullPath)
        {
            string sqlCeConnString;
            sqlCeConnString = string.Format(SqlCeConnectionStringTemplate, databaseFullPath);
            return sqlCeConnString;
        }

        public void EmptyTrash()
        {
            (new Order()).EmptyTrash(this);
            (new Product()).EmptyTrash(this);
            (new OrderProduct()).EmptyTrash(this);
        }

        public object ExecuteScalar(string cmdText, SqlCeParameter[] parameters)
        {
            object result = null;
            using (var conn = new SqlCeConnection(this._connectionString))
            {
                conn.Open();
                SqlCeCommand cmd = conn.CreateCommand();
                cmd.CommandText = cmdText;
                if (parameters != null)
                {                    
                    cmd.Parameters.AddRange(parameters);
                }
                result = cmd.ExecuteScalar();
                cmd.Parameters.Clear();
            }

            return result;
        }

        public int ExecuteNonQuery(string cmdText, SqlCeParameter[] parameters)
        {
            int rowsAffected;
            rowsAffected = 0;

            using (SqlCeConnection conn = new SqlCeConnection(this._connectionString))
            {
                conn.Open();
                SqlCeCommand cmd = conn.CreateCommand();
                cmd.CommandText = cmdText;
                if (parameters != null)
                {
                    cmd.Parameters.AddRange(parameters);
                }
                rowsAffected = cmd.ExecuteNonQuery();
                cmd.Parameters.Clear();
            }

            return rowsAffected;
        }

        public void CreateCeDb(string databaseFullPath)
        {
            IOHelpers.LogSubroutine("CreateDB");

            // create the database
            IOHelpers.CreateDirectoryIfNotExists(Constants.ApplicationDataStoreFullPath);
            if (!File.Exists(databaseFullPath))
            {
                var engine = new SqlCeEngine(this._connectionString);
                engine.CreateDatabase();
                engine.Dispose();
            }
        }

        private bool TableExists(string tableName)
        {
            IOHelpers.LogSubroutine("TableExists");

            const string queryTemplate = @"SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = '{0}'";
            string query = string.Format(queryTemplate, tableName);

            var count = (int)this.ExecuteScalar(query, null);

            bool tableExists = count > 0;

            return tableExists;
        }

        private void CreateTables()
        {
            IOHelpers.LogSubroutine("CreateTables");

            string createTableQuery;

            if (!this.TableExists("tblOrder"))
            {
                createTableQuery
                    = @"CREATE TABLE tblOrder 
                    (Id uniqueidentifier PRIMARY KEY, Name NVARCHAR(100), IsInTrash BIT)";

                this.ExecuteNonQuery(createTableQuery, null);
            }

            if (!this.TableExists("tblProduct"))
            {
                createTableQuery
                    = @"CREATE TABLE tblProduct 
                    (Upc NVARCHAR(100) PRIMARY KEY, Name NVARCHAR(100), VendorName NVARCHAR(100), IsInTrash BIT)";

                this.ExecuteNonQuery(createTableQuery, null);
            }

            if (!this.TableExists("tblOrderProduct"))
            {
                createTableQuery
                    = @"CREATE TABLE tblOrderProduct 
                    (OrderID uniqueidentifier, ProductUPC NVARCHAR(100), CasesToOrder INTEGER, IsInTrash BIT, 
                    CONSTRAINT PK_OrderProduct PRIMARY KEY (OrderID, ProductUPC))";

                this.ExecuteNonQuery(createTableQuery, null);
            }
        }
    }
}
